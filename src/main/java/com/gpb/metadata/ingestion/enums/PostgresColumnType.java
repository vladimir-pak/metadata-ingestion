package com.gpb.metadata.ingestion.enums;

import java.util.HashMap;
import java.util.Map;

public enum PostgresColumnType {
    ARRAY("ARRAY"),
    BIGINT("BIGINT"),
    BIGNUMERIC("NUMERIC"),
    BIGSERIAL("BIGINT"),
    BINARY("BINARY"),
    BIT("INT"),
    BLOB("BLOB"),
    BOOL("BOOLEAN"),
    BOOLEAN("BOOLEAN"),
    BPCHAR("CHAR"),
    BYTEINT("BYTEINT"),
    BYTES("BYTES"),
    CHAR("CHAR"),
    CHARACTER_VARYING("VARCHAR"),
    BINARY_VARYING("VARBINARY"),
    CURSOR("BINARY"),
    DATE("DATE"),
    DATETIME("DATETIME"),
    DATETIME2("DATETIME"),
    DATETIMEOFFSET("DATETIME"),
    DECIMAL("DECIMAL"),
    DOUBLE_PRECISION("DOUBLE"),
    DOUBLEPRECISION("DOUBLE"),
    DOUBLE("DOUBLE"),
    ENUM("ENUM"),
    FLOAT("FLOAT"),
    FLOAT4("FLOAT"),
    FLOAT32("FLOAT"),
    FLOAT64("DOUBLE"),
    FLOAT8("DOUBLE"),
    GEOGRAPHY("GEOGRAPHY"),
    GEOMETRY("GEOMETRY"),
    HYPERLOGLOG("BINARY"),
    IMAGE("IMAGE"),
    INT("INT"),
    INT2("SMALLINT"),
    INT4("INT"),
    INT8("BIGINT"),
    INT16("BIGINT"),
    INT32("BIGINT"),
    INT64("BIGINT"),
    INT128("BIGINT"),
    INT256("BIGINT"),
    INTEGER("INT"),
    UINT("INT"),
    UINT2("SMALLINT"),
    UINT4("INT"),
    UINT8("BIGINT"),
    UINT16("BIGINT"),
    UINT32("BIGINT"),
    UINT64("BIGINT"),
    UINT128("BIGINT"),
    UINT256("BIGINT"),
    INTERVAL_DAY_TO_SECOND("INTERVAL"),
    INTERVAL_YEAR_TO_MONTH("INTERVAL"),
    INTERVAL("INTERVAL"),
    LONG_RAW("BINARY"),
    LONG_VARCHAR("VARCHAR"),
    LONGBLOB("LONGBLOB"),
    MAP("MAP"),
    MEDIUMBLOB("MEDIUMBLOB"),
    MEDIUMINT("INT"),
    MEDIUMTEXT("MEDIUMTEXT"),
    MONEY("NUMBER"),
    NCHAR("CHAR"),
    NTEXT("NTEXT"),
    NULL("NULL"),
    NUMBER("NUMBER"),
    NUMERIC("NUMERIC"),
    NVARCHAR("VARCHAR"),
    OBJECT("JSON"),
    RAW("BINARY"),
    REAL("FLOAT"),
    RECORD("STRUCT"),
    ROWID("VARCHAR"),
    ROWVERSION("NUMBER"),
    SET("SET"),
    SMALLDATETIME("DATETIME"),
    SMALLINT("SMALLINT"),
    SMALLMONEY("NUMBER"),
    SMALLSERIAL("SMALLINT"),
    SQL_VARIANT("VARBINARY"),
    STRING("STRING"),
    STRUCT("STRUCT"),
    ROW("STRUCT"),
    TABLE("BINARY"),
    TEXT("TEXT"),
    TIME("TIME"),
    TIMESTAMP_WITHOUT_TIME_ZONE("TIMESTAMP"),
    TIMESTAMP_WITH_TIME_ZONE("TIMESTAMP"),
    TIME_WITH_TZ("TIME"),
    TIME_WITHOUT_TZ("TIME"),
    TIMESTAMP("TIMESTAMP"),
    TIMESTAMPTZ("TIMESTAMP"),
    TIMESTAMP_NTZ("TIMESTAMP"),
    TIMESTAMP_LTZ("TIMESTAMP"),
    TIMESTAMP_TZ("TIMESTAMP"),
    TIMETZ("TIMESTAMP"),
    TINYINT("TINYINT"),
    UNION("UNION"),
    UROWID("VARCHAR"),
    VARBINARY("VARBINARY"),
    VARCHAR("VARCHAR"),
    VARIANT("JSON"),
    JSON("JSON"),
    JSONB("JSON"),
    UUID("UUID"),
    POINT("GEOMETRY"),
    POLYGON("GEOMETRY"),
    AGGREGATEFUNCTION("AGGREGATEFUNCTION"),
    BYTEA("BYTEA"),
    UNKNOWN("UNKNOWN"),
    HLLSKETCH("HLLSKETCH"),
    SUPER("SUPER"),
    BOX("GEOMETRY"),
    CIRCLE("GEOMETRY"),
    LINE("GEOMETRY"),
    LSEG("GEOMETRY"),
    PATH("GEOMETRY"),
    PG_LSN("PG_LSN"),
    PG_SNAPSHOT("PG_SNAPSHOT"),
    TSQUERY("TSQUERY"),
    TXID_SNAPSHOT("TXID_SNAPSHOT"),
    XML("XML"),
    TSVECTOR("TSVECTOR"),
    MACADDR("MACADDR"),
    MACADDR8("MACADDR"),
    CIDR("CIDR"),
    INET("INET"),
    TSRANGE("DATETIMERANGE"),
    BINARY_DOUBLE("DOUBLE"),
    BINARY_FLOAT("FLOAT"),
    XMLTYPE("XML"),
    BFILE("BINARY"),
    CLOB("CLOB"),
    NCLOB("CLOB"),
    LONG("LONG"),
    LOWCARDINALITY("LOWCARDINALITY"),
    DATETIME64("DATETIME"),
    SIMPLEAGGREGATEFUNCTION("AGGREGATEFUNCTION"),
    IPV4("IPV4"),
    IPV6("IPV6"),
    VOID("NULL"),
    TINYBLOB("BLOB"),
    LONGTEXT("TEXT"),
    TINYTEXT("TEXT"),
    YEAR("YEAR"),
    EMPTY("NULL"),
    I2("INT"),
    I4("INT"),
    R4("FLOAT"),
    R8("DOUBLE"),
    CY("NUMERIC"),
    BSTR("BINARY"),
    IDISPATCH("BINARY"),
    ERROR("VARCHAR"),
    IUNKNOWN("UNKNOWN"),
    UI1("INT"),
    BYREF("BINARY"),
    I1("INT"),
    UI2("SMALLINT"),
    UI4("INT"),
    I8("BIGINT"),
    UI8("BIGINT"),
    GUID("BINARY"),
    VECTOR("BINARY"),
    FILETIME("BINARY"),
    RESERVED("BINARY"),
    STR("STRING"),
    WSTR("STRING"),
    UDT("JSON"),
    DBDATE("DATE"),
    DBTIME("TIME"),
    DBTIMESTAMP("TIMESTAMP"),
    HCHAPTER("VARCHAR"),
    PROPVARIANT("BINARY"),
    VARNUMERIC("NUMERIC"),
    WDC_INT("INT"),
    WDC_FLOAT("FLOAT"),
    WDC_STRING("STRING"),
    WDC_DATETIME("DATETIME"),
    WDC_BOOL("BOOLEAN"),
    WDC_DATE("DATE"),
    WDC_GEOMETRY("GEOMETRY"),
    CHARACTER("CHAR"),
    OID("BIGINT"),
    NAME("VARCHAR");

    private final String targetType;

    PostgresColumnType(String targetType) {
        this.targetType = targetType;
    }

    public String getTargetType() {
        return targetType;
    }

    private static final Map<String, PostgresColumnType> LOOKUP = new HashMap<>();

    static {
        for (PostgresColumnType type : values()) {
            LOOKUP.put(type.name(), type);
        }
    }

    public static String map(String source) {
        if (!source.isEmpty()) {
            PostgresColumnType mapping = LOOKUP.get(source.toUpperCase());
        return mapping != null ? mapping.getTargetType() : "UNKNOWN";
        } else {
            return source;
        }
    }
}
